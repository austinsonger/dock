name: CI

on: [push]

jobs:
  baseimage:
    name: baseimage
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/baseimage:latest baseimage

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/baseimage

      # save image as artifact
      - run: docker save minimum2scp/baseimage:latest | pigz -c - > /tmp/baseimage.tar.gz
      - uses: actions/upload-artifact@v1
        with: { name: baseimage, path: /tmp/baseimage.tar.gz }

  ruby:
    name: ruby
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    needs: [baseimage]
    steps:
      # load parent image
      - uses: actions/download-artifact@v1
        with: { name: baseimage, path: /tmp }
      - run: pigz -c -d /tmp/baseimage.tar.gz | docker load

      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/ruby:latest ruby

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/ruby

      # save image as artifact
      - run: docker save minimum2scp/ruby:latest | pigz -c - > /tmp/ruby.tar.gz
      - uses: actions/upload-artifact@v1
        with: { name: ruby, path: /tmp/ruby.tar.gz }

  nodejs:
    name: nodejs
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    needs: [baseimage]
    steps:
      # load parent image
      - uses: actions/download-artifact@v1
        with: { name: baseimage, path: /tmp }
      - run: pigz -c -d /tmp/baseimage.tar.gz | docker load

      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/nodejs:latest nodejs

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/nodejs

      # No need to save image as artifact

  ruby-full:
    name: ruby-full
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    needs: [ruby]
    steps:
      # load parent image
      - uses: actions/download-artifact@v1
        with: { name: ruby, path: /tmp }
      - run: pigz -c -d /tmp/ruby.tar.gz | docker load

      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/ruby-full:latest ruby-full

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/ruby-full

      # No need to save image as artifact

  rails6:
    name: rails6
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    needs: [ruby]
    steps:
      # load parent image
      - uses: actions/download-artifact@v1
        with: { name: ruby, path: /tmp }
      - run: pigz -c -d /tmp/ruby.tar.gz | docker load

      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/rails6:latest rails6

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/rails6

      # No need to save image as artifact

  tdiary:
    name: tdiary
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    needs: [ruby]
    steps:
      # load parent image
      - uses: actions/download-artifact@v1
        with: { name: ruby, path: /tmp }
      - run: pigz -c -d /tmp/ruby.tar.gz | docker load

      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/tdiary:latest tdiary

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/tdiary

      # No need to save image as artifact

  baseimage-buster:
    name: baseimage-buster
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/baseimage-buster:latest baseimage-buster

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/baseimage-buster

      # save image as artifact
      - run: docker save minimum2scp/baseimage-buster:latest | pigz -c - > /tmp/baseimage-buster.tar.gz
      - uses: actions/upload-artifact@v1
        with: { name: baseimage-buster, path: /tmp/baseimage-buster.tar.gz }

  ruby-buster:
    name: ruby-buster
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    needs: [baseimage-buster]
    steps:
      # load parent image
      - uses: actions/download-artifact@v1
        with: { name: baseimage-buster, path: /tmp }
      - run: pigz -c -d /tmp/baseimage-buster.tar.gz | docker load

      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/ruby-buster:latest ruby-buster

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/ruby-buster

      # No need to save image as artifact

  baseimage-stretch:
    name: baseimage-stretch
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/baseimage-stretch:latest baseimage-stretch

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/baseimage-stretch

      # save image as artifact
      - run: docker save minimum2scp/baseimage-stretch:latest | pigz -c - > /tmp/baseimage-stretch.tar.gz
      - uses: actions/upload-artifact@v1
        with: { name: baseimage-stretch, path: /tmp/baseimage-stretch.tar.gz }

  ruby-stretch:
    name: ruby-stretch
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    needs: [baseimage-stretch]
    steps:
      # load parent image
      - uses: actions/download-artifact@v1
        with: { name: baseimage-stretch, path: /tmp }
      - run: pigz -c -d /tmp/baseimage-stretch.tar.gz | docker load

      # build image
      - uses: actions/checkout@master
      - run: docker build -t minimum2scp/ruby-stretch:latest ruby-stretch

      # setup ruby
      - run: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - run: gem install bundler --version '>= 2.0.0'
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - run: bundle config path vendor/bundle
      - run: bundle install --jobs 4 --retry 3

      # run test
      - run: bundle exec rspec spec/ruby-stretch

      # No need to save image as artifact

