##
## mkimage.sh wrapper.
## usage:
##
##   rake mkimage TAG=minimum2scp/debian-jessie:latest
##

require 'erb'
require 'json'
require 'rake/clean'
require 'tmpdir'
require 'tempfile'

CLOBBER.include 'build.log', 'debian-packages.json', 'README.md'

task :default => ['README.md']

desc 'create mkimage.sh log file'
file 'build.log' do
  Rake::Task[:mkimage].invoke
end

desc 'run mkimage.sh'
task :mkimage  do
  tag_option = ENV['TAG'] ? "-t #{ENV['TAG']}" : ''
  debootstrap_options = %w[
    --arch=amd64 --variant=minbase --components=main --include=iproute2,inetutils-ping --cache-dir=/var/tmp/mkimage-sh-cache-debootstrap
  ]
  debootstrap_options << "--cache-dir=#{ENV['DEBOOTSTRAP_CACHE_DIR']}" if ENV['DEBOOTSTRAP_CACHE_DIR']
  debootstrap_options << 'jessie' << 'http://ftp.jp.debian.org/debian'
  debootstrap_options = debootstrap_options.join(' ')
  env = ENV.select{|k,v| ['TMPDIR', 'http_proxy'].include?(k) }.map{|k,v| "#{k}=#{v}"}.join(' ')
  mkimage_sh = %W[
    /usr/share/docker-ce/contrib/mkimage.sh
    /usr/share/docker-engine/contrib/mkimage.sh
    /usr/share/docker.io/contrib/mkimage.sh
  ].find{|f| File.executable?(f) }
  unless mkimage_sh
    raise "mkimage.sh not found"
  end
  sh "sudo #{env} #{mkimage_sh} #{tag_option} debootstrap #{debootstrap_options} | tee build.log"
end

desc 'update debian-packages.json'
file 'debian-packages.json' => ['build.log'] do |t|
  tag = ENV['TAG'] || 'minimum2scp/debian-jessie:latest'
  tmpfile = Tempfile.new('packages')
  tmpfile.close
  fields = %w[
    Architecture Conflicts Breaks Depends Enhances Essential Installed-Size Origin Package
    Pre-Depends Priority Provides Recommends Replace Section Status Suggests Version
    binary:Package binary:Summary db:Status-Abbrev db:Status-Want db:Status-Status db:Status-Eflag
    source:Package source:Version
  ]
  field_fmt = fields.map{|f| "${#{f}}"}.join("\\t") + "\\n"
  sh %Q[docker run --rm #{tag} dpkg-query -f '#{field_fmt}' -W > #{tmpfile.path}], :verbose => false
  packages = File.readlines(tmpfile.path).map(&:chomp).map{|row| Hash[fields.zip(row.split("\t"))]}
  File.open(t.name, "w") do |fh|
    fh << JSON.pretty_generate(packages)
  end
end

desc 'update README.md'
file 'README.md' => ['README.md.erb', 'debian-packages.json'] do |t|
  packages = JSON.parse(File.read('debian-packages.json'))
  File.open(t.name, "w") do |fh|
    fh << ERB.new(File.read('README.md.erb'), nil, '-').result(binding)
  end
end

